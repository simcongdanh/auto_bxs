# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\airdrop_1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pyautogui
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QApplication
from selenium import webdriver
from time import sleep
import os, sys, random, threading, threaded, pyautogui, requests, PIL
from anycaptcha import RecaptchaV2Task, AnycaptchaClient, RecaptchaV2TaskProxyless
from selenium.webdriver.common.keys import Keys


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(464, 296)
        self.listWidget = QtWidgets.QListWidget(Dialog)
        self.listWidget.setGeometry(QtCore.QRect(10, 10, 441, 191))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.listWidget.setFont(font)
        self.listWidget.setObjectName("listWidget")
        self.lb_link = QtWidgets.QLabel(Dialog)
        self.lb_link.setGeometry(QtCore.QRect(10, 210, 431, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.lb_link.setFont(font)
        self.lb_link.setObjectName("lb_link")
        self.lb_total = QtWidgets.QLabel(Dialog)
        self.lb_total.setGeometry(QtCore.QRect(10, 250, 431, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.lb_total.setFont(font)
        self.lb_total.setObjectName("lb_total")
        self.lb_success = QtWidgets.QLabel(Dialog)
        self.lb_success.setGeometry(QtCore.QRect(10, 270, 431, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.lb_success.setFont(font)
        self.lb_success.setObjectName("lb_success")
        self.lb_numlink = QtWidgets.QLabel(Dialog)
        self.lb_numlink.setGeometry(QtCore.QRect(10, 230, 431, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.lb_numlink.setFont(font)
        self.lb_numlink.setObjectName("lb_numlink")
        self.btn_run = QtWidgets.QPushButton(Dialog)
        self.btn_run.setGeometry(QtCore.QRect(350, 210, 101, 81))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.btn_run.setFont(font)
        self.btn_run.setObjectName("btn_run")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.btn_run.clicked.connect(self.thread_run)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Airdrop_By_CongDanh"))
        self.lb_link.setText(_translate("Dialog", "Link ref:"))
        self.lb_total.setText(_translate("Dialog", "Total address:"))
        self.lb_success.setText(_translate("Dialog", "Successfully:"))
        self.lb_numlink.setText(_translate("Dialog", "Number or ref:"))
        self.btn_run.setText(_translate("Dialog", "Run"))
    #change ip
    def changeip(self):
        print("Disconnect . . .")
        os.system("offdcom.bat")
        sleep(2)
        print("Connecting . . ")
        os.system("ondcom.bat")
        sleep(2)
    #run thread ip
    def thread_ip(self):
        t = threading.Thread(target=self.changeip)
        t.start()
        t.join()

    @threaded.Threaded(started=True)
    def run_airdrop(self):
        ho = {
            "Le",
            "Nguyen",
            "Ly",
            "Tran",
            "Trinh",
            "Hoai",
            "Hoang",
            "Phan",
            "Bui",
            "Do",
            "Ho",
            "Ngo",
            "Duong",
            "Huynh",
            "Pham",
            "Vo",
            "Vu",
            "Hoai"
        }
        ten_dem = {
            "van",
            "le",
            "truong",
            "to",
            "tuan",
            "huu",
            "an",
            "anh",
            "gia",
            "hoai",
            "khanh",
            "nhat",
            "minh",
            "bao",
            "cong",
            "duc",
            "dinh",
            "duy",
            "hieu",
            "khai",
            "manh",
            "vy"
        }
        ten = {
            "huan",
            "phat",
            "thien",
            "huu",
            "tien",
            "sieu",
            "ma",
            "tieu",
            "cuong",
            "loi",
            "canh",
            "tue",
            "vu",
            "dat",
            "thanh",
            "cong",
            "kiet",
            "thai",
            "phuong",
            "hoai",
            "khanh",
            "nhat",
            "minh",
            "bao",
            "cong",
            "duc",
            "dinh",
            "khai",
            "manh",
            "vy"
        }
        list_ho = list(ho)
        list_ten_dem = list(ten_dem)
        list_ten = list(ten)
        random_ho = random.choice(list_ho)
        random_ten_dem = random.choice(list_ten_dem)
        random_ten = random.choice(list_ten)
        # domains = ["@hotmail.com", "@gmail.com", "@aol.com", "@mail.com", "@mail.kz", "@yahoo.com"]
        randomemail_1 = random_ho + random_ten_dem + random_ten + str(random.randint(0, 999)) + str(random.randint(0, 999)) + "@gmail.com"
        num_ref = 0
        #address
        with open('Save.txt') as f:
            texts = f.read().splitlines()
        address = []
        for text in texts:
            # text.split("|")
            address.append(text)
        bsc_ad = []
        for i in range(0, len(address)):
            address[i].split("|")
            bsc_ad.append(address[i][:42])
        # dxdy
        with open('link_bxs.txt') as d:
            get_link = d.read().splitlines()
        links = []
        for link in get_link:
            links.append(link)

        for i in range(0, len(bsc_ad)):
            self.thread_ip()
            num_ref_link = 0
            num_ref += 1
            #url_dxdy = links[0]
            #url_dz = links_dz[0]
            number_link = 0
            self.lb_total.setText(f"Total address: {str(len(bsc_ad))}")
            if num_ref_link > 45:
                num_ref_link = 0
                number_link += 1
            url_bxs = links[int(number_link)]
            #url_dxdy = links[int(number_link)]
            chrome_options = webdriver.ChromeOptions()
            chrome_options.add_argument("--incognito")
            browser = webdriver.Chrome(chrome_options=chrome_options)
            if len(address[i]) >= 42:
                #dxdy
                self.lb_link.setText(f"Link: {url_bxs}")
                self.lb_numlink.setText(f"Number of link: {num_ref_link}")
                browser.get(url_bxs)
                browser.implicitly_wait(10)
                try:
                    browser.find_element_by_name("bscAddress").send_keys(bsc_ad[i])
                except:
                    browser.find_elements_by_xpath('//*[@id="app"]/div[3]/div[2]/div[1]/form/div[1]/div/div/input')[0].send_keys(bsc_ad[i])
                sleep(3)
                try:
                    browser.find_element_by_name('email').send_keys(randomemail_1)
                except:
                    browser.find_elements_by_xpath('//*[@id="app"]/div[3]/div[2]/div[1]/form/div[2]/div/div/input')[0].send_keys(randomemail_1)
                sleep(3)
                #pyautogui.click(pyautogui.locateCenterOnScreen('Screenshot_4.png'))
                try:

                    # browser.switch_to.frame(browser.find_element_by_xpath("//iframe[contains(@title,'reCAPTCHA') and contains(@role,'presentation')]"))
                    browser.switch_to.frame(browser.find_element_by_xpath('//*[@id="app"]/div[3]/div[2]/div[1]/form/div[3]/div/div/iframe'))
                except:
                    browser.switch_to.frame(browser.find_element_by_xpath('#app > div.airdrop-page > div.airdrop-middle > div.airdrop-blind-box > form > div.grecaptcha-warpper > div > div > iframe'))
                sleep(1)
                # try:
                #     browser.find_element_by_id("recaptcha-anchor").click()
                # except:
                #     browser.find_element_by_xpath('//*[@id="recaptcha-anchor"]').click()
                # browser.implicitly_wait(5)
                site_key = "6Lc9AhQdAAAAAB2gLv-YDmlu8bS9srUHvTlgvn0P"
                api_key = '73f6fe6d2e444b2e93c1803b94b65aec'
                client = AnycaptchaClient(api_key)
                is_invisible = True
                task = RecaptchaV2TaskProxyless(website_url=url_bxs, website_key=site_key, is_invisible=is_invisible)
                job = client.createTask(task)
                job.join(maximum_time=120)
                result = job.get_solution_response()
                if result.find("ERROR") != -1:
                    print("fail ", result)
                else:
                    print("success ", result)
                #browser.switch_to.default_content()
                #recaptcha = browser.find_element_by_id("recaptcha-token")
                # browser.switch_to.default_content()

                # captchaChkbox = browser.getElementById("g-recaptcha-response")
                browser.execute_script('document.getElementById("g-recaptcha-response").innerHTML = "%s"' % result)
                try:
                    browser.find_element_by_xpath('//*[@id="app"]/div[3]/div[2]/div[1]/form/div[4]/button').click()
                except:
                    browser.find_element_by_css_selector('#app > div.airdrop-page > div.airdrop-middle > div.airdrop-blind-box > form > div.button-box-bg > button').click()
                self.lb_success.setText(f"Successfully: {num_ref}")
                sleep(8)

            browser.close()
    #run thread ref
    def thread_run(self):
        t = threading.Thread(target=self.run_airdrop)
        t.start()
        t.join()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    Dialog = QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec())
